/* tslint:disable */
/* eslint-disable */

/* auto-generated by NAPI-RS */

export const enum Align {
  None = 0,
  XMinYMin = 1,
  XMidYMin = 2,
  XMaxYMin = 3,
  XMinYMid = 4,
  XMidYMid = 5,
  XMaxYMid = 6,
  XMinYMax = 7,
  XMidYMax = 8,
  XMaxYMax = 9
}
export interface AspectRatio {
  /**
   * `<defer>` value.
   *
   * Set to `true` when `defer` value is present.
   */
  defer: boolean
  /** `<align>` value. */
  align: Align
  /**
   * `<meetOrSlice>` value.
   *
   * - Set to `true` when `slice` value is present.
   * - Set to `false` when `meet` value is present or value is not set at all.
   */
  slice: boolean
}
export interface ViewPort {
  width: number
  height: number
}
export interface Options {
  /**
   * Specific dimensions the SVG will be forced to fill in nominal SVG
   * pixels. If this is `Some`, the resulting PDF will always have the
   * corresponding size converted to PostScript points according to `dpi`. If
   * it is `None`, the PDF will either take on the native size of the SVG or
   * 100 by 100 if no native size was specified (i.e. there is no `viewBox`,
   * no `width`, and no `height` attribute).
   *
   * Normally, unsized SVGs will take on the size of the target viewport. In
   * order to achieve the behavior in which your SVG will take its native
   * size and the size of your viewport only if it has no native size, you
   * need to create a usvg [`Tree`] for your file in your own code. You will
   * then need to set the `default_size` field of the [`usvg::Options`]
   * struct to your viewport size and set this field according to
   * `tree.svg_node().size`.
   *
   * _Default:_ `None`.
   */
  viewport?: ViewPort
  /**
   * Override the scaling mode of the SVG within its viewport. Look
   * [here][aspect] to learn about the different possible modes.
   *
   * _Default:_ `None`.
   *
   * [aspect]: https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/preserveAspectRatio
   */
  aspect?: AspectRatio
  /**
   * The dots per inch to assume for the conversion to PDF's printer's
   * points. Common values include `72.0` (1pt = 1px; Adobe and macOS) and
   * `96.0` (Microsoft) for standard resolution screens and multiples of
   * `300.0` for print quality.
   *
   * This, of course, does not change the output quality (except for very
   * high values, where precision might degrade due to floating point
   * errors). Instead, it sets what the physical dimensions of one nominal
   * pixel should be on paper when printed without scaling.
   *
   * _Default:_ `72.0`.
   */
  dpi?: number
  /**
   * Whether the content streams should be compressed.
   *
   * The smaller PDFs generated by this are generally more practical but it
   * increases runtime a bit.
   *
   * _Default:_ `true`.
   */
  compress?: boolean
}
export function convert(input: Buffer | string | unknown, options?: Options | undefined | null): Buffer
